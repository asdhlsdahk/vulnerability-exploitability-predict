import numpy as np
import pickle
import tensorflow as tf
from tensorflow.examples.tutorials.mnist import input_data
import numpy as np
from sklearn.model_selection import train_test_split
from keras.models import Sequential
from keras.layers import Dense
import keras
import keras_metrics
from keras.optimizers import SGD
from keras.utils import np_utils
batch_size = 128
# 梯度下降一个批（batch）的数据量
nb_classes = 2
# 类别
nb_epoch = 10
# 梯度下降epoch循环训练次数，每次循环包含全部的样本
image_size = 401*1
# 输入图片的大小，由于是灰度图片，因此只有一个颜色通道

pickle_file = open("applefa.pkl", "rb")
pickle_file2 = open("labelapplefa.pkl", "rb")
x_train = pickle.load(pickle_file)
print(x_train)
y_train = pickle.load(pickle_file2)
print(y_train)

train_X, test_X, train_y, test_y = train_test_split(x_train, y_train, test_size=0.15)

print("kaishixunlian")
print(train_X.shape)
model = Sequential()
# 添加了输入层的信息
model.add(Dense(32, activation='relu', input_shape=(338,)))
# batch_size = 20, 30, 50, ...
# 添加第一个隐含层的信息
model.add(Dense(32, activation='relu'))
model.add(Dense(32, activation='relu'))
model.add(Dense(32, activation='relu'))
model.add(Dense(32, activation='relu'))
# 添加第二个隐含层
model.add(Dense(1, activation='sigmoid'))

# 目标函数，优化算法，评估方法（准确，AUC）
model.compile(loss='binary_crossentropy', optimizer="sgd", metrics=['accuracy', keras_metrics.recall(),
                        keras_metrics.precision(),keras_metrics.f1_score()])
# 训练模型
model.fit(train_X, train_y, batch_size=30, epochs=30, verbose=1, validation_data=(test_X, test_y))

score = model.evaluate(test_X, test_y, verbose=1)

print("Test loss: ", score[0])  # 目标函数，损失函数
print("Test accuracy: ", score[1])  # 正确率
# print(score[2])
